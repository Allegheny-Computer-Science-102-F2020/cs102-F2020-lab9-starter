---
name: cs102-F2020-lab9
break: true
indent: 4
---

# Learn more about GatorGrader and its supported checks by visiting this web site:
# https://github.com/GatorEducator/gatorgrader

# Explanation:
# --> a check without an "--exact" runs a count for an entity as an "at least"
# --> checks below a file in a specified directory are for that specific file and directory
# --> checks that appear stand-alone are for an entire Git repository

# --> check the Python program
fibonaccicreator/fibonaccicreator/__main__.py:
    ConfirmFileExists
    MatchFileFragment --fragment "TODO" --count 0 --exact
    MatchFileFragment --fragment "Option(...)" --count 2 --exact
    MatchFileFragment --fragment "import sys" --count 1 --exact
    MatchFileFragment --fragment "sys.getsizeof" --count 1 --exact
    MatchFileFragment --fragment "fibonacci.fibonacci_storage" --count 1 --exact
    MatchFileFragment --fragment "run(main)" --count 1 --exact
    MatchFileFragment --fragment "getattr(" --count 1 --exact
    MatchFileFragment --fragment "function_to_call(" --count 1 --exact
    MatchFileFragment --fragment "format_bytes" --count 2
    CountMultipleLineComments --language Python --count 3
    CountSingleLineComments --language Python --count 4

# --> check the Python program
fibonaccicreator/fibonaccicreator/fibonacci.py:
    ConfirmFileExists
    MatchFileFragment --fragment "TODO" --count 0 --exact
    MatchFileFragment --fragment "result = ()" --count 0 --exact
    MatchFileFragment --fragment "(a,)" --count 0 --exact
    MatchFileFragment --fragment "a = 1" --count 1
    MatchFileFragment --fragment "b = 1" --count 1
    MatchFileFragment --fragment "fibonacci_iterative" --count 1
    MatchFileFragment --fragment "fibonacci_recursive" --count 3
    MatchFileFragment --fragment "fibonacci_memoized" --count 3
    CountMultipleLineComments --language Python --count 4
    CountSingleLineComments --language Python --count 16

# --> check the Python program
fibonaccicreator/tests/test_fibonacci.py:
    ConfirmFileExists
    MatchFileFragment --fragment "TODO" --count 0 --exact
    MatchFileFragment --fragment "test_" --count 9
    CountMultipleLineComments --language Python --count 4

# --> check the technical writing for various characteristics
writing/reflection.md:
    ConfirmFileExists
    CountFileWords --count 500
    CountMarkdownTags --tag "heading" --count 8
    CountMarkdownTags --tag "code_block" --count 3
    MatchFileFragment --fragment "TODO" --count 0 --exact
    MatchFileFragment --fragment "Add Your Name Here" --count 0 --exact

# --> check that the number of commits in the Git repository is beyond a threshold
CountCommits --count 5

# --> check that the program executes correctly
ExecuteCommand --command "cd fibonaccicreator; poetry install; poetry run python fibonaccicreator --number 1000 --approach iterative --display; cd .."

# Output of the Python Program:

# The chosen type of approach is iterative!

# The program will compute the 1000th Fibonacci number! ðŸ”¢

# This is the output from fibonacci_iterative:

#   70330367711422815821835254877183549770181269836358732742604905087154537118196933579742249494562611733487750449241765991088186363265450223647106012053374121273867339111198139373125598767690091902245245323403501

# So, was this an efficient approach for computing the Fibonacci sequence? ðŸ¤·

# Estimated overall memory according to the operating system:
#    19.2109375 megabytes

# Estimated peak memory according to the operating system:
#    33.73046875 megabytes

# Estimated size of the dictionary: 64 bytes
